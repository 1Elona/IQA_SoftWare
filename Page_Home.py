# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
from functools import partial

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize, QThread, pyqtSignal
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QPushButton, QProgressBar, QFileDialog, QMessageBox
import time

import Database
import Util
from TaskWindow import TaskWindow

class MyThread(QThread):
    # 定义信号，更新进度条的进度
    progress_signal = pyqtSignal(int)

    def __init__(self):
        super().__init__()

    def run(self):
        for i in range(101):
            #收到完成的信号后到时候这里自己改
            self.progress_signal.emit(i)
            time.sleep(0.1)
class Ui_Home(object):
    #新建主任务后发出信号
    switch_window = QtCore.pyqtSignal()
    # 点击加号后发出信号
    switch_window_2 = QtCore.pyqtSignal(int)
    # 点击编辑发出信号
    switch_window_3 = QtCore.pyqtSignal(int)

    #当前有多少行 优化后这里不需要再定义一个mainid 只要想清楚先进行数据库添加修改再进行vm操作 根据vm操作修改mainid
    row_count = 0
    #新建的任务
    tasklist = []
    task_index = 0

    #后端返回的参数个数
    num_columns = 3

    #当前有多少子表行
    row_count_sub = 0
    #一打开主表id数据量
    mainId = []







    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1256, 868)

        #一次定义多处使用
        self.edit = os.path.join(Util.unify_path().application_path, 'need/edit.png')
        self.add = os.path.join(Util.unify_path().application_path, 'need/add-circle.png')
        self.ashbin = os.path.join(Util.unify_path().application_path, 'need/ashbin.png')



        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")


        self.widget_2 = QtWidgets.QWidget(self.frame)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        # self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        # self.verticalLayout_2.setObjectName("verticalLayout_2")
        # self.listView = QtWidgets.QListView(self.widget_2)
        # self.listView.setObjectName("listView")
        # self.verticalLayout_2.addWidget(self.listView)
        # self.horizontalLayout_12.addLayout(self.verticalLayout_2)


        # active games 下消失

        
        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        # self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.centralwidget)
        # self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        # self.frame = QtWidgets.QFrame(self.centralwidget)
        # self.frame.setStyleSheet("QFrame#frame{\n"
        #                          "    background-color: rgba(255, 255, 255, 150);\n"
        #                          "    border-radius:20px;\n"
        #                          "}")
        #
        # # 左边的列表
        # self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.frame.setObjectName("frame")
        # self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame)
        # self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        # self.horizontalLayout_7.setSpacing(12)
        # self.horizontalLayout_7.setObjectName("horizontalLayout_7")


        self.frame_2 = QtWidgets.QFrame(self.widget_2)
        self.frame_2.setStyleSheet("QFrame#frame_2{\n"
                                   "    background-color: rgba(255, 255, 255, 255);\n"
                                   "    border-radius:20px;\n"
                                   "}")

        # 列表
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_82 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_82.setContentsMargins(-1, -1, -1, 36)
        self.verticalLayout_82.setSpacing(2)
        self.verticalLayout_82.setObjectName("verticalLayout_82")
        self.frame_5 = QtWidgets.QFrame(self.frame_2)
        self.frame_5.setStyleSheet("border:none")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_86 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_86.setContentsMargins(-1, 24, -1, -1)
        self.horizontalLayout_86.setObjectName("horizontalLayout_86")
        self.widget_6 = QtWidgets.QWidget(self.frame_5)
        self.widget_6.setMinimumSize(QtCore.QSize(65, 65))
        self.widget_6.setMaximumSize(QtCore.QSize(65, 65))
        widget_6_logo = os.path.join(Util.unify_path().application_path, 'img/img/image.png')

        self.widget_6.setStyleSheet(f"image: url({widget_6_logo});\n"
 "border-radius:32px;\n"
 "background-color: rgb(223, 223, 223);")


        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_86.addWidget(self.widget_6)
        self.verticalLayout_82.addWidget(self.frame_5)
        self.label88 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label88.setFont(font)
        self.label88.setStyleSheet("color: rgb(22, 54, 53)")
        self.label88.setAlignment(QtCore.Qt.AlignCenter)
        self.label88.setObjectName("label88")
        self.verticalLayout_82.addWidget(self.label88)
        self.label_82 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_82.setFont(font)
        self.label_82.setStyleSheet("color: rgb(102, 128, 127);")
        self.label_82.setAlignment(QtCore.Qt.AlignCenter)
        self.label_82.setObjectName("label_82")
        self.verticalLayout_82.addWidget(self.label_82)
        self.listWidget88 = QtWidgets.QListWidget(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget88.setFont(font)
        self.listWidget88.setStyleSheet("QListView {\n"
                                      "    padding-top:24px;\n"
                                      "    border-radius: 30px;\n"
                                      "    color: rgb(106, 106, 106);\n"
                                      "}\n"
                                      "QListView::item{\n"
                                      "background-color: transparent;\n"
                                      "height:40px;\n"
                                      # "padding-left:12px;\n"
                                      "padding:12px;\n"
                                      "border-radius: 30px;\n"
                                      "}\n"

                                      "QListView::item:hover {\n"
                                      "    background-color: rgba(216, 216, 216, 50);\n"
                                      "\n"
                                      "}\n"
                                      "QListView::item:selected {\n"
                                      "    /*background-color: transparent;*/\n"
                                      "    background-color: rgba(90, 216, 212,50);\n"
                                      "    color: rgb(40, 92, 90);\n"
                                      "border-left: 2px solid rgb(90, 216, 212)\n"
                                      "\n"
                                      "\n"
                                      "}\n"
                                      "")
        #

        self.listWidget88.setIconSize(QtCore.QSize(24, 24))
        self.listWidget88.setObjectName("listWidget88")
        item = QtWidgets.QListWidgetItem()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/buttom/未读消息_message-unread.svg"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        item.setIcon(icon)
        self.listWidget88.addItem(item)
        item = QtWidgets.QListWidgetItem()
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("img/buttom/任天堂游戏_switch-nintendo.svg"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        item.setIcon(icon1)
        self.listWidget88.addItem(item)
        item = QtWidgets.QListWidgetItem()
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("img/buttom/仪表盘_dashboard-one.svg"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        item.setIcon(icon2)
        self.listWidget88.addItem(item)
        item = QtWidgets.QListWidgetItem()
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("img/buttom/中指_middle-finger.svg"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        item.setIcon(icon3)
        self.listWidget88.addItem(item)
        self.verticalLayout_82.addWidget(self.listWidget88)
        self.frame_6 = QtWidgets.QFrame(self.frame_2)
        self.frame_6.setStyleSheet("QFrame{\n"
                                   "    background-color: rgb(89, 217, 212);\n"
                                   "    border-radius:20px;color: rgb(255, 255, 255);\n"
                                   "}\n"
                                   "\n"
                                   "")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout888 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout888.setObjectName("horizontalLayout888")
        self.verticalLayout888 = QtWidgets.QVBoxLayout()
        self.verticalLayout888.setSpacing(0)
        self.verticalLayout888.setObjectName("verticalLayout888")
        self.label_83 = QtWidgets.QLabel(self.frame_6)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_83.setFont(font)
        self.label_83.setAlignment(QtCore.Qt.AlignCenter)
        self.label_83.setObjectName("label_83")
        self.verticalLayout888.addWidget(self.label_83)
        self.label_84 = QtWidgets.QLabel(self.frame_6)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_84.setFont(font)
        self.label_84.setAlignment(QtCore.Qt.AlignCenter)
        self.label_84.setObjectName("label_84")
        self.verticalLayout888.addWidget(self.label_84)
        self.label_85 = QtWidgets.QLabel(self.frame_6)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_85.setFont(font)
        self.label_85.setAlignment(QtCore.Qt.AlignCenter)
        self.label_85.setObjectName("label_85")
        self.verticalLayout888.addWidget(self.label_85)
        self.horizontalLayout888.addLayout(self.verticalLayout888)
        self.widget_82 = QtWidgets.QWidget(self.frame_6)

        self.widget_82.setStyleSheet(f"image: url({widget_6_logo});")
        self.widget_82.setObjectName("widget_82")
        self.horizontalLayout888.addWidget(self.widget_82)
        self.verticalLayout_82.addWidget(self.frame_6)
        self.verticalLayout_82.setStretch(0, 1)
        self.verticalLayout_82.setStretch(3, 3)
        self.verticalLayout_82.setStretch(4, 1)
        self.horizontalLayout_12.addWidget(self.frame_2)
        #
        #
        #
        #
        #
        #
        #































        self.widget_4 = QtWidgets.QWidget(self.widget_2)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.widget_4)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.Button_Create = QtWidgets.QPushButton(self.widget_4)
        self.Button_Create.setObjectName("Button_Create")
        self.horizontalLayout_4.addWidget(self.Button_Create)
        self.Button_Delete = QtWidgets.QPushButton(self.widget_4)
        self.Button_Delete.setStyleSheet("#Button_Delete{\n"
"color:rgb(255, 0, 0);\n"
"}")
        self.Button_Delete.setObjectName("Button_Delete")
        self.horizontalLayout_4.addWidget(self.Button_Delete)
        spacerItem = QtWidgets.QSpacerItem(178, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.widget_4)
        self.tableWidget_2.setObjectName("tableWidget_2")






        #tableWidget_2是上表格
        self.tableWidget_2.setColumnCount(7)
        self.tableWidget_2.setHorizontalHeaderLabels(['序号', '任务名', '执行进度', '输入文件夹', '输出文件夹', '操作', '创建时间'])



        self.horizontalLayout_5.addWidget(self.tableWidget_2)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(329, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.Button_up_1 = QtWidgets.QPushButton(self.widget_4)
        self.Button_up_1.setObjectName("Button_up_1")
        self.horizontalLayout.addWidget(self.Button_up_1)
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setEnabled(True)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.Button_down_1 = QtWidgets.QPushButton(self.widget_4)
        self.Button_down_1.setObjectName("Button_down_1")
        self.horizontalLayout.addWidget(self.Button_down_1)
        spacerItem2 = QtWidgets.QSpacerItem(329, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_3 = QtWidgets.QLabel(self.widget_4)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_7.addWidget(self.label_3)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.comboBox = QtWidgets.QComboBox(self.widget_4)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")



        self.horizontalLayout_3.addWidget(self.comboBox)
        self.label_11 = QtWidgets.QLabel(self.widget_4)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_3.addWidget(self.label_11)
        spacerItem3 = QtWidgets.QSpacerItem(268, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        # tableWidget_4是下面的表格
        self.tableWidget_4 = QtWidgets.QTableWidget(self.widget_4)
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(8)
        self.tableWidget_4.setHorizontalHeaderLabels(['任务名', '原图名', '算法名', '指标名', '执行时间', '增强效果', '指标结果', '操作'])

        self.horizontalLayout_8.addWidget(self.tableWidget_4)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem4 = QtWidgets.QSpacerItem(329, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem4)
        self.Button_up_2 = QtWidgets.QPushButton(self.widget_4)
        self.Button_up_2.setObjectName("Button_up_2")
        self.horizontalLayout_6.addWidget(self.Button_up_2)
        self.label_9 = QtWidgets.QLabel(self.widget_4)
        self.label_9.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_6.addWidget(self.label_9)
        self.Button_down_2 = QtWidgets.QPushButton(self.widget_4)
        self.Button_down_2.setObjectName("Button_down_2")
        self.horizontalLayout_6.addWidget(self.Button_down_2)
        spacerItem5 = QtWidgets.QSpacerItem(329, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem5)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_12.addWidget(self.widget_4)
        self.horizontalLayout_10.addWidget(self.widget_2)
        self.horizontalLayout_11.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1256, 42))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #测试跳转
        self.Button_Create.clicked.connect(self.HomeToNewMainTask)
        self.Button_Delete.clicked.connect(self.delete_all)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.label88.setText(_translate("MainWindow", "Erduo"))
        self.label_82.setText(_translate("MainWindow", "Pro Member"))
        __sortingEnabled = self.listWidget88.isSortingEnabled()
        self.listWidget88.setSortingEnabled(False)
        item = self.listWidget88.item(0)
        item.setText(_translate("MainWindow", "Streams"))
        item = self.listWidget88.item(1)
        item.setText(_translate("MainWindow", "Games"))
        item = self.listWidget88.item(2)
        item.setText(_translate("MainWindow", "New"))
        item = self.listWidget88.item(3)
        item.setText(_translate("MainWindow", "Librory"))
        self.listWidget88.setSortingEnabled(__sortingEnabled)
        self.label_83.setText(_translate("MainWindow", "Join pro"))
        self.label_84.setText(_translate("MainWindow", "for free"))
        self.label_85.setText(_translate("MainWindow", "games."))

        self.label_4.setText(_translate("MainWindow", "主任务列表"))
        self.Button_Create.setText(_translate("MainWindow", "新建主任务"))
        self.Button_Delete.setText(_translate("MainWindow", "删除所有任务"))
        self.Button_up_1.setText(_translate("MainWindow", "上一页"))
        self.label_2.setText(_translate("MainWindow", "1/5"))
        self.Button_down_1.setText(_translate("MainWindow", "下一页"))
        self.label_3.setText(_translate("MainWindow", "子任务列表"))
        self.comboBox.setItemText(0, _translate("MainWindow", ""))
        self.label_11.setText(_translate("MainWindow", "执行总时间：50s"))
        self.Button_up_2.setText(_translate("MainWindow", "上一页"))
        self.label_9.setText(_translate("MainWindow", "1/5"))
        self.Button_down_2.setText(_translate("MainWindow", "下一页"))
    def HomeToNewMainTask(self):
        self.switch_window.emit()

#从新建主任务点击完成（数据库已添加）后调用
    def add_task(self):
        # edit = os.path.join(Util.unify_path().application_path, 'need/edit.png')
        # add = os.path.join(Util.unify_path().application_path, 'need/add-circle.png')
        # ashbin = os.path.join(Util.unify_path().application_path, 'need/ashbin.png')

        task = TaskWindow(self.edit, 1,self.add ,self.ashbin)

        Ui_Home.tasklist.append(task)
        Ui_Home.tasklist[Ui_Home.task_index] = task  # 将 a[0] 的值设置为 b 的引用


        # self.tableWidget_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)  # 使表宽度自适应
        self.tableWidget_2.setColumnWidth(5, 180) #设置第五列的表宽
        self.tableWidget_2.verticalHeader().setDefaultSectionSize(50) #使表高固定
        # 进度条
        self.progress = QProgressBar()
        #获取当前的行数
        Ui_Home.row_count = self.tableWidget_2.rowCount()
        # 查找mainid的时候要注意到之前删除了几个  比如删除了一个那这时候的行数就会少x查找的时候要补回去


        task_dict = Database.selectMaintaskByRow(Ui_Home.row_count+1)
        print("添加的任务",task_dict)
        if task_dict is None:
            QMessageBox.warning(self, '警告', '不能添加重复任务名')
            return
        #点击新建
        self.tableWidget_2.insertRow(Ui_Home.row_count)

        self.tableWidget_2.setItem(Ui_Home.row_count, 0, QTableWidgetItem((str(task_dict["Id"]))))
        self.tableWidget_2.setItem(Ui_Home.row_count, 1, QTableWidgetItem(task_dict["task_name"]))
        self.tableWidget_2.setCellWidget(Ui_Home.row_count, 2, self.progress)
        self.tableWidget_2.setItem(Ui_Home.row_count, 3, QTableWidgetItem(task_dict["input"]))
        self.tableWidget_2.setItem(Ui_Home.row_count, 4, QTableWidgetItem(task_dict["output"]))
        self.tableWidget_2.setCellWidget(Ui_Home.row_count, 5, task)
        self.tableWidget_2.setItem(Ui_Home.row_count, 6, QTableWidgetItem(task_dict["create_time"]))
#更新进度的话progress要加入button_status的partial
        task.button_add.clicked.connect(partial(self.addbutton_clicked,task))
        task.button_status.clicked.connect(partial(self.start_task,self.progress,task))
        task.button_edit.clicked.connect(partial(self.editbutton_clicked,task))
        task.button_delete.clicked.connect(partial(self.delete_tab2row,task))
        Ui_Home.row_count = Ui_Home.row_count+1
        print("点击添加任务后row_count",Ui_Home.row_count)
        Ui_Home.task_index = Ui_Home.task_index+1

#从编辑点击完成后调用这个
    def update_task(self,row):



        task_dict = Database.selectMaintaskByRow(row)
        print("更新后任务",task_dict)

        self.tableWidget_2.setItem(row-1, 0, QTableWidgetItem((str(task_dict["Id"]))))
        self.tableWidget_2.setItem(row-1, 1, QTableWidgetItem(task_dict["task_name"]))
        self.tableWidget_2.setItem(row-1, 3, QTableWidgetItem(task_dict["input"]))
        self.tableWidget_2.setItem(row-1, 4, QTableWidgetItem(task_dict["output"]))
        self.tableWidget_2.setItem(row-1, 6, QTableWidgetItem(task_dict["create_time"]))



    def show_maintask(self):

        self.tableWidget_2.setColumnWidth(5, 180) #设置第五列的表宽
        self.tableWidget_2.verticalHeader().setDefaultSectionSize(50) #使表高固定

        for i,j in enumerate(Database.selectAll()):
            self.tableWidget_2.insertRow(i)
            self.progress = QProgressBar()

            task = TaskWindow(self.edit, 1, self.add, self.ashbin)
            task.button_add.clicked.connect(partial(self.addbutton_clicked,task))
            task.button_status.clicked.connect(partial(self.start_task,self.progress,task))
            task.button_edit.clicked.connect(partial(self.editbutton_clicked,task))
            task.button_delete.clicked.connect(partial(self.delete_tab2row,task))
            self.mainId.append(j["Id"])
            self.tableWidget_2.setItem(i, 0, QTableWidgetItem((str(j["Id"]))))
            self.tableWidget_2.setItem(i, 1, QTableWidgetItem(j["task_name"]))
            self.tableWidget_2.setCellWidget(i, 2, self.progress)
            self.tableWidget_2.setItem(i, 3, QTableWidgetItem(j["input"]))
            self.tableWidget_2.setItem(i, 4, QTableWidgetItem(j["output"]))
            self.tableWidget_2.setCellWidget(i, 5, task)
            self.tableWidget_2.setItem(i, 6, QTableWidgetItem(j["create_time"]))
            Ui_Home.row_count = Ui_Home.row_count+1
        print("显示页面row_count",Ui_Home.row_count)

    def show_subtask(self):


        #凑出已有的任务（初始化subtask）
        yiyoutask = ["任务{}".format(i) for i in self.mainId]
        self.comboBox.addItems(yiyoutask)
        self.comboBox.currentIndexChanged.connect(self.selectionchange)

        self.tableWidget_4.verticalHeader().setDefaultSectionSize(50)





    def selectionchange(self):

        self.tableWidget_4.setRowCount(0)
        #提取数字
        try:
            d = re.findall(r'\d+', self.comboBox.currentText())
            self.initSubFormUi(d[0])
        except Exception as e:
            return





    def add_task_2(self,row):
        #删除图标的按钮
        self.button_delete = QPushButton()
        self.initIcon(self.button_delete,"./iconfont/error.png")


        # 创建任务对象
        self.tableWidget_4.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)  # 使表宽度自适应
        self.tableWidget_4.verticalHeader().setDefaultSectionSize(50) #使表高固定


        # 更新表格  从数据库查找出字典
        a = Database.selectMaintaskByRow(row)
        self.initSubFormUi(a["Id"])






    #解耦 一开始我把button_clicked定义在task中表面上合理但是缺会发生重复调用
    def addbutton_clicked(self,task):
        self.switch_window_2.emit(task.row)
    def editbutton_clicked(self,task):

        print('点击的行数',task.row)
        self.switch_window_3.emit(task.row)



#这个场景也实现了在不知道有多少个删除按钮的情况下实现了对按钮的移除self.sender()会自动解析传递过来对信号找到对应对按钮
# 注意只有一个按钮的时候可以用这种方法获取，封装成一个task到时候需要在task中定义row editbutton_clicked同理
    def delete_tab4row(self):
        button = self.sender()
        row = self.tableWidget_4.indexAt(button.pos()).row()
        print("delete",row)
        self.tableWidget_4.removeRow(row)
        d = re.findall(r'\d+', self.comboBox.currentText())
        Database.delete_subdataByrow(row+1,d[0])

    def start_task(self,progress,task):
        # 创建线程，并开始执行任务(待完成,参数需要添加progress)
        self.thread = MyThread()
        self.thread.progress_signal.connect(partial(self.update_progress,progress))
        self.thread.start()
        # 开始执行
        task.status_change()
        # self.thread.exit(200)



    # 进度条逻辑，待完成
    def update_progress(self,progress,value):
        # 更新进度条的进度
        progress.setValue(value)
    def delete_all(self):
        Database.deleteAll()

        self.tableWidget_2.setRowCount(0)

        Ui_Home.row_count = 0

    def delete_tab2row(self,task):
        print(task.row)
        self.tableWidget_2.removeRow(task.row-1)
        Database.deletebyRow(task.row)
        Ui_Home.row_count = Ui_Home.row_count-1
        # 先把删除的那一行后面的所有的行数都需要重制row索引
        for i in range(task.row,len(Ui_Home.tasklist)):
            print(Ui_Home.tasklist[i].row,'6',i)
            Ui_Home.tasklist[i].row = i
        # del Ui_Home.tasklist[task.row-1]
        #可用的索引-1
        Ui_Home.task_index = Ui_Home.task_index -1



        print("删除一行后row_count", Ui_Home.row_count)

    def initIcon(self,widget,icon):
        self.pixmap = QPixmap(icon)
        widget.setIcon(QtGui.QIcon(self.pixmap))
        # 按钮的大小
        widget.setIconSize(QSize(30, 30))
        widget.setMinimumSize(QSize(30, 30))
        widget.setMaximumSize(QSize(30, 30))
        # 按钮透明
        widget.setFlat(True)
        widget.setStyleSheet("background:transparent;")
        return widget

#传入主任务id来初始化子表
    def initSubFormUi(self,id):
        try:
            kk = Database.selectall_subdataById(id)
            if not kk is None:
                for i, j in enumerate(kk):
                    # 删除按钮
                    self.button_delete = QPushButton()
                    self.initIcon(self.button_delete, "./iconfont/error.png")
                    self.tableWidget_4.insertRow(i)
                    self.tableWidget_4.setItem(i, 0, QTableWidgetItem((j["Taskname"])))
                    self.tableWidget_4.setItem(i, 1, QTableWidgetItem(j["Ori_Imgname"]))
                    self.tableWidget_4.setItem(i, 2, QTableWidgetItem(j["Alg_Name"]))
                    self.tableWidget_4.setItem(i, 3, QTableWidgetItem(j["Index_Name"]))
                    self.tableWidget_4.setItem(i, 4, QTableWidgetItem(j["Execute_Time"]))


                    self.tableWidget_4.setCellWidget(i, 7, self.button_delete)
                    self.button_delete.clicked.connect(self.delete_tab4row)

        except Exception as e:
            print(e)

